import numpy as np
import matplotlib.pyplot as plt
from sigma_points import SigmaPoints

class UnscentedTransform(object):

    def __init__(self, F, n, m):
        # Dimension of original state vector x
        self.n = n
        # Dimension of output vector
        self.m = m
        # Nonlinear function F
        self.F = F
        # Sigma points
        self.points = SigmaPoints()
        
    # Do an unscented transform 
    def do_transform(self, x, Pxx, sigma_set = 'mean', **kwargs):
        # Generate sigma points
        X, w_m, w_c = self.points.get_sigma_set(x, Pxx, sigma_set, **kwargs)
        # Transform them
        Y = self.F(X)
        # Measurement mean
        y = np.dot(w_m, Y)
        # Transformed covariance
        Pyy = np.zeros((self.m, self.m))
        for i in range(len(w_c)):
            Pyy += w_c[i]*np.outer(Y[i] - x, Y[i] - y)
        return y, Pyy


       



        
                


        
        
